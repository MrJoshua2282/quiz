{"version":3,"sources":["Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","input","elType","className","disabled","type","id","name","value","required","onClick","style","width","htmlFor","label","App","state","answerId","correctOnFirstAttempt","correctOnSecondAttempt","page","questions","answer","attempts","chosenAnswer","question","answers","selectAnswerHandler","event","i","target","questionsCopy","map","el","index","setState","submitAnswerHandler","questionIndex","prev","answersSelection","cur","firstAttempt","filter","length","secondAttempt","this","ind","e","key","onChange","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07e21ca2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.scss';\n\nconst Input = (props) => {\n    let input;\n    switch (props.elType) {\n        case ('radio'):\n            input = <input className={`quiz-input ${props.disabled ? 'danger' : ''}`} disabled={props.disabled} type=\"radio\" id={props.id} name={props.name} value={props.id} required />;\n            break;\n        case ('checkbox'):\n            input = <input className={`quiz-input ${props.disabled ? 'danger' : ''}`} type=\"checkbox\" id={props.id} name={props.id} value={props.value} required />;\n            break;\n        default:\n            input = <input className={`quiz-input ${props.disabled ? 'danger' : ''}`} type=\"radio\" id={props.id} name={props.name} value={props.id} required />;\n    }\n    return (\n        <div onClick={props.onClick} className={`div-input ${props.disabled ? 'danger' : ''}`}>\n\n            <label onClick={props.onClick} style={{ width: '40rem' }} className='quiz-label ' htmlFor={props.id}>{input}{props.label}</label>\n        </div>\n    );\n}\n\nexport default Input;","import React, { Component } from 'react';\n\nimport './App.scss';\nimport Input from './Input/Input';\n\nclass App extends Component {\n  state = {\n    answerId: '',\n    correctOnFirstAttempt: 0,\n    correctOnSecondAttempt: 0,\n    page: 0,\n    questions: [\n      {\n        elType: 'radio', name: 'sport', answer: 'soccer', attempts: [], chosenAnswer: '', question: 'What is the most popular sport in the world?', answers: [\n          { disabled: false, id: 'americanFootball', label: 'American Football' },\n          { disabled: false, id: 'soccer', label: 'Soccer' },\n          { disabled: false, id: 'basketball', label: 'Basketball' },\n          { disabled: false, id: 'baseball', label: 'Baseball' },\n          { disabled: false, id: 'cricket', label: 'Cricket' }\n        ]\n      },\n      {\n        elType: 'radio', name: 'population', answer: 'indonesia', attempts: [], chosenAnswer: '', question: 'What country has the 4th largest population?', answers: [\n          { disabled: false, id: 'unitedStates', label: 'United States' },\n          { disabled: false, id: 'india', label: 'India' },\n          { disabled: false, id: 'china', label: 'China' },\n          { disabled: false, id: 'indonesia', label: 'Indonesia' },\n          { disabled: false, id: 'brazil', label: 'Brazil' }\n        ]\n      },\n      {\n        elType: 'radio', name: 'population', answer: 'cuba', attempts: [], chosenAnswer: '', question: `North Korea and what other country don't allow coca-cola?`, answers: [\n          { disabled: false, id: 'cuba', label: 'Cuba' },\n          { disabled: false, id: 'pakistan', label: 'Pakistan' },\n          { disabled: false, id: 'china', label: 'China' },\n          { disabled: false, id: 'russia', label: 'Russia' },\n          { disabled: false, id: 'madagascar', label: 'Madagascar' }\n        ]\n      },\n      {\n        elType: 'radio', name: 'population', answer: 'france', attempts: [], chosenAnswer: '', question: `What is the top most visited country in the world?`, answers: [\n          { disabled: false, id: 'unitedStates', label: 'United States' },\n          { disabled: false, id: 'mexico', label: 'Mexico' },\n          { disabled: false, id: 'japan', label: 'Japan' },\n          { disabled: false, id: 'france', label: 'France' },\n          { disabled: false, id: 'italy', label: 'Italy' }\n        ]\n      },\n      {\n        elType: 'radio', name: 'population', answer: 'muhammad', attempts: [], chosenAnswer: '', question: 'What is the most popular name in the world?', answers: [\n          { disabled: false, id: 'muhammad', label: 'Muhammad' },\n          { disabled: false, id: 'jane', label: 'Jane' },\n          { disabled: false, id: 'john', label: 'John' },\n          { disabled: false, id: 'krishna', label: 'Krishna' },\n          { disabled: false, id: 'mary', label: 'Mary' }\n        ]\n      },\n      {\n        elType: 'radio', name: 'population', answer: 'southSudan', attempts: [], chosenAnswer: '', question: 'What is the youngest country in the world?', answers: [\n          { disabled: false, id: 'southSudan', label: 'South Sudan' },\n          { disabled: false, id: 'unitedStates', label: 'United States' },\n          { disabled: false, id: 'southKorea', label: 'South Korea' },\n          { disabled: false, id: 'indonesia', label: 'Indonesia' },\n          { disabled: false, id: 'brazil', label: 'Brazil' }\n        ]\n      }\n    ]\n  }\n\n  selectAnswerHandler = (event, i) => {\n    const { value } = event.target;\n    let questionsCopy = [...this.state.questions];\n\n    questionsCopy = questionsCopy.map((el, index) => {\n      if (index === i) {\n        el.chosenAnswer = value;\n      }\n      return el;\n    });\n    this.setState({ questions: questionsCopy });\n  }\n\n  submitAnswerHandler = (event, chosenAnswer, answer, questionIndex) => {\n    // if no answer was chosen, do nothing\n    if (!chosenAnswer) return;\n\n    let questionsCopy = [...this.state.questions];\n\n    // if answer is correct, continue to the next question\n    if (chosenAnswer === answer) {\n      this.setState((prev) => ({\n        page: prev.page + 1\n      }));\n    }\n\n    // if answer is incorrect, add '1' to attempts arr\n    // disable that answer, add styling'\n    if (chosenAnswer !== answer) {\n      questionsCopy = questionsCopy.map((el, index) => {\n        if (index === questionIndex) {\n          el.attempts = [...el.attempts, 1];\n          el.chosenAnswer = '';\n\n          // update the disabled property\n          let answersSelection = [...el.answers].map(cur => {\n            if (cur.id === this.state.answerId) {\n              cur.disabled = true;\n              return cur;\n            };\n            return cur;\n          });\n\n          el.answers = answersSelection;\n        }\n        return el;\n      });\n    }\n\n    // find the questions that were answered on first attempt\n    let firstAttempt = [...questionsCopy].filter(el => el.attempts.length === 0).length;\n    // find the questions that were answered on second attempt\n    let secondAttempt = [...questionsCopy].filter(el => el.attempts.length === 1).length;\n    this.setState({ questions: questionsCopy, correctOnFirstAttempt: firstAttempt, correctOnSecondAttempt: secondAttempt });\n  }\n\n  render() {\n    let page = this.state.questions.map((el, i) => {\n      if (i === this.state.page) {\n        let answers = el.answers.map((cur, ind) => {\n          return <Input onClick={e => this.setState({ answerId: e.target.value })} disabled={cur.disabled} key={cur.id} elType={el.elType} name={el.name} id={cur.id} value={cur.id} label={cur.label} />\n        });\n        return (\n          <div className='container' key={el.name} onChange={e => this.selectAnswerHandler(e, i)}>\n            <h1>{el.question}</h1>\n            {answers}\n            <button className='quiz-btn' onClick={e => this.submitAnswerHandler(e, el.chosenAnswer, el.answer, i)}>submit answer</button>\n          </div>\n        );\n      }\n    });\n\n    return (\n      <div className=\"App\">\n        {this.state.page === this.state.questions.length && <div className='results-div'>\n          <h1>Results</h1>\n          <h2>you scored {`${this.state.correctOnFirstAttempt}/${this.state.questions.length}`} on your first attempts ({(this.state.correctOnFirstAttempt / this.state.questions.length).toFixed(2) * 100}%)</h2>\n          <h2>you scored {`${this.state.correctOnSecondAttempt}/${this.state.questions.length}`} on your second attempts ({(this.state.correctOnSecondAttempt / this.state.questions.length).toFixed(2) * 100}%)</h2>\n        </div>}\n        {this.state.page !== this.state.questions.length && page}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}